#include <ros.h>
#include <ArduinoHardware.h>
#include <Arduino.h>
#include <std_msgs/Empty.h>
#include <std_msgs/Int8.h>
#include "A4988.h"

#define sag_o_1 16
#define sag_o_2 17

#define motor1_en 57

#define sag_a_1 27
#define sag_a_2 29

#define motor3_en 65

#define sol_o_1 23
#define sol_o_2 25

#define motor2_en 58

#define sol_a_1 31
#define sol_a_2 33

#define motor4_en 66

#define MOTOR_STEPS 200off
#define X_STEP_PIN         54
#define X_DIR_PIN          55
#define X_ENABLE_PIN       38
#define X_MIN_PIN           3
#define X_MAX_PIN           2

#define Y_STEP_PIN         60
#define Y_DIR_PIN          61
#define Y_ENABLE_PIN       56
#define Y_MIN_PIN          14
#define Y_MAX_PIN          15

#define Z_STEP_PIN         46
#define Z_DIR_PIN          48
#define Z_ENABLE_PIN       62
#define Z_MIN_PIN          18
#define Z_MAX_PIN          19


double w_r=0, w_l=0;
double wheel_rad = 0.0325, wheel_sep = 0.295;

ros::NodeHandle nh;

int lowSpeed = 200;
int highSpeed = 50;
double speed_ang=0, speed_lin=0;

void deger(const geometry_msgs::Twist& msg)
{
  speed_ang = msg.angular.z;
  speed_lin = msg.linear.x;
  w_r = (speed_lin/wheel_rad) + ((speed_ang*wheel_sep)/(2.0*wheel_rad));
  w_l = (speed_lin/wheel_rad) - ((speed_ang*wheel_sep)/(2.0*wheel_rad));
}

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", &deger );
void Motor_init();
void MotorL(int Pulse_Width1);
void MotorR(int Pulse_Width2);

A4988 stepper1(MOTOR_STEPS, X_DIR_PIN, X_STEP_PIN );
A4988 stepper2(MOTOR_STEPS, Y_DIR_PIN, Y_STEP_PIN);
A4988 stepper3(MOTOR_STEPS, Z_DIR_PIN, Z_STEP_PIN );


void startMotor1(const std_msgs::Empty& toggle_msg){

  digitalWrite(Z_STEP_PIN    , HIGH);
  digitalWrite(Z_DIR_PIN    , HIGH);
  digitalWrite(Y_STEP_PIN    , HIGH);
  digitalWrite(Y_DIR_PIN    , HIGH);
  digitalWrite(X_STEP_PIN    , HIGH);
  digitalWrite(X_DIR_PIN    , HIGH);

  stepper2.begin(15, 16);
  stepper2.rotate(360);
  stepper4.begin(15, 16);
  stepper4.rotate(360);
  stepper5.begin(15, 16);
  stepper5.rotate(360);
  stepper3.begin(15, 16);
  stepper3.rotate(360);
  stepper1.begin(15, 16);
  stepper1.rotate(360);


  digitalWrite(X_STEP_PIN    , LOW);
  digitalWrite(X_DIR_PIN    , LOW);
  digitalWrite(Y_STEP_PIN    , LOW);
  digitalWrite(Y_DIR_PIN    , LOW);
  digitalWrite(Z_STEP_PIN    , LOW);
  digitalWrite(Z_DIR_PIN    , LOW);



}



ros::Subscriber<std_msgs::Empty> _1("motor1/start", &startMotor1);

void setup() { 

 Motor_init();
 nh.initNode();
 nh.subscribe(sub);
 
  pinMode(X_STEP_PIN  , OUTPUT);
  pinMode(X_DIR_PIN    , OUTPUT);
  pinMode(X_ENABLE_PIN    , OUTPUT);

  pinMode(Y_STEP_PIN  , OUTPUT);
  pinMode(Y_DIR_PIN    , OUTPUT);
  pinMode(Y_ENABLE_PIN    , OUTPUT);

  pinMode(Z_STEP_PIN  , OUTPUT);
  pinMode(Z_DIR_PIN    , OUTPUT);
  pinMode(Z_ENABLE_PIN    , OUTPUT);
  
  
  
  nh.initNode();
  
  nh.subscribe(motor1);

}

void loop() {  
  nh.spinOnce();
  

  delay(1);
  
  MotorL(w_l*10);
  MotorR(w_r*10);
  nh.spinOnce();
  delay(100);

    digitalWrite(X_STEP_PIN    , LOW);
  digitalWrite(X_DIR_PIN    , LOW);
  digitalWrite(X_ENABLE_PIN    , LOW);
    
  digitalWrite(Y_STEP_PIN    , LOW);
  digitalWrite(Y_DIR_PIN    , LOW); 
  digitalWrite(Y_ENABLE_PIN    , LOW);
   
  digitalWrite(Z_STEP_PIN    , LOW);
  digitalWrite(Z_DIR_PIN    , LOW);
  digitalWrite(Z_ENABLE_PIN    , LOW);

}
void Motor_init()
{
  pinMode(sag_o_1, OUTPUT); // motor sürücü pinleri çıkış olarak ayarlandı
  pinMode(sag_o_2, OUTPUT);
  pinMode(sag_a_1, OUTPUT);
  pinMode(sag_a_2, OUTPUT);

  pinMode(sol_o_1, OUTPUT); // motor sürücü pinleri çıkış olarak ayarlandı
  pinMode(sol_o_2, OUTPUT);
  pinMode(sol_a_1, OUTPUT);
  pinMode(sol_a_2, OUTPUT);

  pinMode(motor1_en, OUTPUT); // motor sürücü enable pinleri çıkış olarak ayarlandı
  pinMode(motor2_en, OUTPUT);
  pinMode(motor3_en, OUTPUT);
  pinMode(motor4_en, OUTPUT);
}

void MotorL(int Pulse_Width1){
 if (Pulse_Width1 > 0){
     analogWrite(motor1_en, Pulse_Width1);
     analogWrite(motor3_en, Pulse_Width1);
     digitalWrite(sag_o_1, HIGH);
     digitalWrite(sag_o_2, LOW);
     digitalWrite(sag_a_1, HIGH);
     digitalWrite(sag_a_2, LOW);
     
 }
 if (Pulse_Width1 < 0){
     Pulse_Width1=abs(Pulse_Width1);
     analogWrite(motor1_en, Pulse_Width1);
     analogWrite(motor3_en, Pulse_Width1);
     digitalWrite(sag_o_1, LOW);
     digitalWrite(sag_o_2, HIGH);
     digitalWrite(sag_a_1, LOW);
     digitalWrite(sag_a_2, HIGH);
 }
 if (Pulse_Width1 == 0){
     analogWrite(motor1_en, Pulse_Width1);
     analogWrite(motor3_en, Pulse_Width1);
     digitalWrite(sag_o_1, LOW);
     digitalWrite(sag_o_2, LOW);
     digitalWrite(sag_a_1, LOW);
     digitalWrite(sag_a_2, LOW);
 }
}
void MotorR(int Pulse_Width2){
 if (Pulse_Width2 > 0){
     analogWrite(motor2_en, Pulse_Width2);
     analogWrite(motor4_en, Pulse_Width2);
     digitalWrite(sag_o_1, LOW);
     digitalWrite(sag_o_2, HIGH);
     digitalWrite(sag_a_1, LOW);
     digitalWrite(sag_a_2, HIGH);
 }
 if (Pulse_Width2 < 0){
     Pulse_Width2=abs(Pulse_Width2);
     analogWrite(motor2_en, Pulse_Width2);
     analogWrite(motor4_en, Pulse_Width2);
     digitalWrite(sag_o_1, HIGH);
     digitalWrite(sag_o_2, LOW);
     digitalWrite(sag_a_1, HIGH);
     digitalWrite(sag_a_2, LOW);
 }
 if (Pulse_Width2 == 0){
     analogWrite(motor2_en, Pulse_Width2);
     analogWrite(motor4_en, Pulse_Width2);
     digitalWrite(sag_o_1, LOW);
     digitalWrite(sag_o_2, LOW);
     digitalWrite(sag_a_1, LOW);
     digitalWrite(sag_a_2, LOW);
 }

 if (Pulse_Width2 == 0){
     analogWrite(motor2_en, Pulse_Width2);
     analogWrite(motor4_en, Pulse_Width2);
     digitalWrite(sag_o_1, LOW);
     digitalWrite(sag_o_2, LOW);
     digitalWrite(sag_a_1, LOW);
     digitalWrite(sag_a_2, LOW);
 }
}
